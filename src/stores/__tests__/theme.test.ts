// „ÉÜ„Éº„Éû„Çπ„Éà„Ç¢„ÅÆ„ÉÜ„Çπ„Éà

import { describe, it, expect, beforeEach, vi } from 'vitest'
import { setActivePinia, createPinia } from 'pinia'
import { useThemeStore } from '../theme'
import { resetStores } from '../../test-utils'

describe('useThemeStore', () => {
  beforeEach(() => {
    setActivePinia(createPinia())
    resetStores()
  })

  describe('Âü∫Êú¨Ê©üËÉΩ', () => {
    it('ÂàùÊúü„ÉÜ„Éº„Éû„ÅØ„É©„Ç§„Éà„ÉÜ„Éº„Éû', () => {
      const store = useThemeStore()
      
      expect(store.theme).toBe('light')
      expect(store.isLight).toBe(true)
      expect(store.isDark).toBe(false)
    })

    it('„ÉÜ„Éº„Éû„ÇíË®≠ÂÆö„Åß„Åç„Çã', () => {
      const store = useThemeStore()
      
      store.setTheme('dark')
      
      expect(store.theme).toBe('dark')
      expect(store.isDark).toBe(true)
      expect(store.isLight).toBe(false)
    })

    it('„ÉÜ„Éº„Éû„ÇíÂàá„ÇäÊõø„Åà„Åß„Åç„Çã', () => {
      const store = useThemeStore()
      
      expect(store.theme).toBe('light')
      
      store.toggleTheme()
      expect(store.theme).toBe('dark')
      
      store.toggleTheme()
      expect(store.theme).toBe('light')
    })
  })

  describe('„ÉÜ„Éº„Éû„Éú„Çø„É≥ÊÉÖÂ†±', () => {
    it('„É©„Ç§„Éà„ÉÜ„Éº„ÉûÊôÇ„ÅØ„ÉÄ„Éº„ÇØ„ÉÜ„Éº„Éû„Å∏„ÅÆÂàá„ÇäÊõø„Åà„Éú„Çø„É≥ÊÉÖÂ†±„ÇíËøî„Åô', () => {
      const store = useThemeStore()
      
      const info = store.themeButtonInfo
      
      expect(info).toMatchObject({
        icon: 'üåô',
        text: '„ÉÄ„Éº„ÇØ'
      })
    })

    it('„ÉÄ„Éº„ÇØ„ÉÜ„Éº„ÉûÊôÇ„ÅØ„É©„Ç§„Éà„ÉÜ„Éº„Éû„Å∏„ÅÆÂàá„ÇäÊõø„Åà„Éú„Çø„É≥ÊÉÖÂ†±„ÇíËøî„Åô', () => {
      const store = useThemeStore()
      
      store.setTheme('dark')
      const info = store.themeButtonInfo
      
      expect(info).toMatchObject({
        icon: '‚òÄÔ∏è',
        text: '„É©„Ç§„Éà'
      })
    })
  })

  describe('„Éâ„Ç≠„É•„É°„É≥„Éà„Å∏„ÅÆÈÅ©Áî®', () => {
    it('„ÉÜ„Éº„ÉûË®≠ÂÆöÊôÇ„Å´„Éâ„Ç≠„É•„É°„É≥„Éà„Å´Â±ûÊÄß„ÅåÈÅ©Áî®„Åï„Çå„Çã', () => {
      const store = useThemeStore()
      const setAttributeSpy = vi.spyOn(document.documentElement, 'setAttribute')
      
      store.setTheme('dark')
      
      expect(setAttributeSpy).toHaveBeenCalledWith('data-theme', 'dark')
    })

    it('applyThemeToDocument „É°„ÇΩ„ÉÉ„Éâ„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã', () => {
      const store = useThemeStore()
      const setAttributeSpy = vi.spyOn(document.documentElement, 'setAttribute')
      
      store.setTheme('dark')
      store.applyThemeToDocument()
      
      expect(setAttributeSpy).toHaveBeenCalledWith('data-theme', 'dark')
    })
  })

  describe('„Ç∑„Çπ„ÉÜ„É†„ÉÜ„Éº„ÉûÊ§úÂá∫', () => {
    it('matchMedia„ÅåÂà©Áî®ÂèØËÉΩ„Å™Â†¥Âêà„ÅØ„Ç∑„Çπ„ÉÜ„É†„ÉÜ„Éº„Éû„ÇíÊ§úÂá∫„Åô„Çã', () => {
      const store = useThemeStore()
      
      // „ÉÄ„Éº„ÇØ„ÉÜ„Éº„Éû„ÅÆ„Ç∑„Çπ„ÉÜ„É†Ë®≠ÂÆö„Çí„É¢„ÉÉ„ÇØ
      window.matchMedia = vi.fn().mockImplementation(query => ({
        matches: query === '(prefers-color-scheme: dark)',
        media: query,
        onchange: null,
        addListener: vi.fn(),
        removeListener: vi.fn(),
        addEventListener: vi.fn(),
        removeEventListener: vi.fn(),
        dispatchEvent: vi.fn(),
      }))
      
      const systemTheme = store.detectSystemTheme()
      
      expect(systemTheme).toBe('dark')
    })

    it('matchMedia„ÅåÂà©Áî®„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅØ„É©„Ç§„Éà„ÉÜ„Éº„Éû„ÇíËøî„Åô', () => {
      const store = useThemeStore()
      
      // @ts-ignore
      window.matchMedia = undefined
      
      const systemTheme = store.detectSystemTheme()
      
      expect(systemTheme).toBe('light')
    })

    it('„Ç∑„Çπ„ÉÜ„É†„ÉÜ„Éº„Éû„Å´Âêà„Çè„Åõ„Å¶Ë®≠ÂÆö„Åß„Åç„Çã', () => {
      const store = useThemeStore()
      
      // „ÉÄ„Éº„ÇØ„ÉÜ„Éº„Éû„ÅÆ„Ç∑„Çπ„ÉÜ„É†Ë®≠ÂÆö„Çí„É¢„ÉÉ„ÇØ
      window.matchMedia = vi.fn().mockImplementation(query => ({
        matches: query === '(prefers-color-scheme: dark)',
        media: query,
        onchange: null,
        addListener: vi.fn(),
        removeListener: vi.fn(),
        addEventListener: vi.fn(),
        removeEventListener: vi.fn(),
        dispatchEvent: vi.fn(),
      }))
      
      store.setSystemTheme()
      
      expect(store.theme).toBe('dark')
    })
  })

  describe('LocalStorageÈÄ£Êê∫', () => {
    it('LocalStorage„Å´„ÉÜ„Éº„Éû„Çí‰øùÂ≠ò„Åß„Åç„Çã', () => {
      const store = useThemeStore()
      const setItemSpy = vi.spyOn(localStorage, 'setItem')
      
      store.setTheme('dark')
      store.saveThemeToStorage()
      
      expect(setItemSpy).toHaveBeenCalledWith('theme', 'dark')
    })

    it('LocalStorage„Åã„Çâ„ÉÜ„Éº„Éû„ÇíË™≠„ÅøËæº„ÇÅ„Çã', () => {
      const store = useThemeStore()
      const getItemSpy = vi.spyOn(localStorage, 'getItem')
      getItemSpy.mockReturnValue('dark')
      
      const loadedTheme = store.loadThemeFromStorage()
      
      expect(loadedTheme).toBe('dark')
      expect(getItemSpy).toHaveBeenCalledWith('theme')
    })

    it('LocalStorage„Å´ÁÑ°Âäπ„Å™ÂÄ§„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØnull„ÇíËøî„Åô', () => {
      const store = useThemeStore()
      const getItemSpy = vi.spyOn(localStorage, 'getItem')
      getItemSpy.mockReturnValue('invalid-theme')
      
      const loadedTheme = store.loadThemeFromStorage()
      
      expect(loadedTheme).toBeNull()
    })

    it('LocalStorage„Ç¢„ÇØ„Çª„Çπ„Å´Â§±Êïó„Åó„ÅüÂ†¥Âêà„ÅØË≠¶Âëä„ÇíÂá∫„Åó„Å¶null„ÇíËøî„Åô', () => {
      const store = useThemeStore()
      const getItemSpy = vi.spyOn(localStorage, 'getItem')
      const consoleWarnSpy = vi.spyOn(console, 'warn').mockImplementation(() => {})
      getItemSpy.mockImplementation(() => {
        throw new Error('LocalStorage error')
      })
      
      const loadedTheme = store.loadThemeFromStorage()
      
      expect(loadedTheme).toBeNull()
      expect(consoleWarnSpy).toHaveBeenCalled()
    })
  })

  describe('ÂàùÊúüÂåñ', () => {
    it('‰øùÂ≠ò„Åï„Çå„Åü„ÉÜ„Éº„Éû„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„Åù„Çå„Çí‰ΩøÁî®„Åô„Çã', () => {
      const store = useThemeStore()
      const getItemSpy = vi.spyOn(localStorage, 'getItem')
      getItemSpy.mockReturnValue('dark')
      
      store.initializeTheme()
      
      expect(store.theme).toBe('dark')
    })

    it('‰øùÂ≠ò„Åï„Çå„Åü„ÉÜ„Éº„Éû„Åå„Å™„ÅÑÂ†¥Âêà„ÅØ„Ç∑„Çπ„ÉÜ„É†„ÉÜ„Éº„Éû„Çí‰ΩøÁî®„Åô„Çã', () => {
      const store = useThemeStore()
      const getItemSpy = vi.spyOn(localStorage, 'getItem')
      getItemSpy.mockReturnValue(null)
      
      // „ÉÄ„Éº„ÇØ„ÉÜ„Éº„Éû„ÅÆ„Ç∑„Çπ„ÉÜ„É†Ë®≠ÂÆö„Çí„É¢„ÉÉ„ÇØ
      window.matchMedia = vi.fn().mockImplementation(query => ({
        matches: query === '(prefers-color-scheme: dark)',
        media: query,
        onchange: null,
        addListener: vi.fn(),
        removeListener: vi.fn(),
        addEventListener: vi.fn(),
        removeEventListener: vi.fn(),
        dispatchEvent: vi.fn(),
      }))
      
      store.initializeTheme()
      
      expect(store.theme).toBe('dark')
    })
  })

  describe('„ÉÜ„Éº„ÉûÂ§âÊõ¥„ÅÆÁõ£Ë¶ñ', () => {
    it('onThemeChange„É°„ÇΩ„ÉÉ„Éâ„ÅåÂ≠òÂú®„Åô„Çã', () => {
      const store = useThemeStore()
      
      expect(typeof store.onThemeChange).toBe('function')
    })

    it('onThemeChange„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ„ÅÆÁôªÈå≤„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Å™„ÅÑ', () => {
      const store = useThemeStore()
      const callback = vi.fn()
      
      expect(() => {
        store.onThemeChange(callback)
      }).not.toThrow()
    })
  })

  describe('„Ç∑„Çπ„ÉÜ„É†„ÉÜ„Éº„ÉûÂ§âÊõ¥„ÅÆÁõ£Ë¶ñ', () => {
    it('„Ç∑„Çπ„ÉÜ„É†„ÉÜ„Éº„ÉûÂ§âÊõ¥„ÅÆÁõ£Ë¶ñ„ÇíË®≠ÂÆö„Åß„Åç„Çã', () => {
      const store = useThemeStore()
      const mockMediaQuery = {
        matches: false,
        media: '(prefers-color-scheme: dark)',
        onchange: null,
        addListener: vi.fn(),
        removeListener: vi.fn(),
        addEventListener: vi.fn(),
        removeEventListener: vi.fn(),
        dispatchEvent: vi.fn(),
      }
      
      window.matchMedia = vi.fn().mockReturnValue(mockMediaQuery)
      
      store.watchSystemTheme()
      
      expect(mockMediaQuery.addEventListener).toHaveBeenCalledWith(
        'change', 
        expect.any(Function)
      )
    })

    it('Âè§„ÅÑ„Éñ„É©„Ç¶„Ç∂„Åß„ÇÇ„Ç∑„Çπ„ÉÜ„É†„ÉÜ„Éº„ÉûÂ§âÊõ¥„ÅÆÁõ£Ë¶ñ„Åå„Åß„Åç„Çã', () => {
      const store = useThemeStore()
      const mockMediaQuery = {
        matches: false,
        media: '(prefers-color-scheme: dark)',
        onchange: null,
        addListener: vi.fn(),
        removeListener: vi.fn(),
        addEventListener: undefined, // Âè§„ÅÑ„Éñ„É©„Ç¶„Ç∂„ÅÆ„Ç∑„Éü„É•„É¨„Éº„Éà
        removeEventListener: vi.fn(),
        dispatchEvent: vi.fn(),
      }
      
      window.matchMedia = vi.fn().mockReturnValue(mockMediaQuery)
      
      store.watchSystemTheme()
      
      expect(mockMediaQuery.addListener).toHaveBeenCalledWith(
        expect.any(Function)
      )
    })
  })
})